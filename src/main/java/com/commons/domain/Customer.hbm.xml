<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

    <!-- 配置表与实体对象的关系 -->
<!-- package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简单类名了. -->
<hibernate-mapping package="com.commons.domain" >
    <!--
        class元素: 配置实体与表的对应关系的
            name: 完整类名
            table:数据库表名
     -->
    <!-- 开启懒加载，lazy为true时，查询类返回代理对象。在使用属性时，根据关联的session查询数据库，加载数据。
        使用懒加载时确保session未关闭，否则会报错
     -->
    <class name="Customer" table="cst_customer" lazy="true">
        <!-- id元素:配置主键映射的属性
                name: 填写主键对应属性名
                column(可选): 填写表中的主键列名.默认值:列名会默认使用属性名
                type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
                        每个类型有三种填法: java类型|hibernate类型|数据库类型
                not-null(可选):配置该属性(列)是否不能为空. 默认值:false
                length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
         -->
        <id name="cust_id"  >
            <!-- generator:主键生成策略.就是每条记录录入时,主键的生成规则.(7个)
					identity : 主键自增.由数据库来维护主键值.录入时不需要指定主键.
					sequence: Oracle中的主键生成策略.
					increment(了解，开发不用): 主键自增.由hibernate来维护.每次插入前会先查询表中id最大值.+1作为新主键值.（缺点：慢，会先查询再插入；而且多线程不安全）
					hilo(了解): 高低位算法.主键自增.由hibernate来维护.开发时不使用.hilo是为那种既不支持主键自增，也不支持主键序列的数据库的，而一般也没有这种数据库。
					native:hilo+sequence+identity 自动三选一策略.（奇葩数据库用hilo，oracle用sequence，mysql用identity。很智能）
					uuid: 产生随机字符串作为主键. 主键类型必须为string 类型.
					assigned:自然主键生成策略. hibernate不会管理主键值.由开发人员自己录入.

			 -->
            <generator class="native"></generator>
        </id>
        <!-- property元素:除id之外的普通属性映射
                name: 填写属性名
                column(可选): 填写列名。如果不写，默认就是实体的属性名
                type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
                        每个类型有三种填法: java类型|hibernate类型|数据库类型
                not-null(可选):配置该属性(列)是否不能为空. 默认值:false
                length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
         -->
        <property name="cust_name" column="cust_name" >
            <!--  <column name="cust_name" sql-type="varchar" ></column> -->
        </property>
        <property name="cust_source" column="cust_source" ></property>
        <property name="cust_industry" column="cust_industry" ></property>
        <property name="cust_level" column="cust_level" ></property>
        <property name="cust_linkman" column="cust_linkman" ></property>
        <property name="cust_phone" column="cust_phone" ></property>
        <property name="cust_mobile" column="cust_mobile" ></property>

        <!-- 集合,一对多关系,在配置文件中配置 -->
        <!--
            name属性:集合属性名
            column属性: 外键列名
            class属性: 与我关联的对象完整类名
         -->
        <!--
            级联操作:	cascade
                save-update: 级联保存更新
                delete:级联删除。危险，不建议使用
                all:save-update+delete
            级联操作: 简化操作.
         -->
        <!-- inverse属性: 配置关系是否维护.默认两方都维护关系，就存在冗余，会执行不必要的sql语句
                true: customer不维护关系
                false(默认值): customer维护关系

            inverse属性: 性能优化.提高关系维护的性能.
            原则: 无论怎么放弃,总有一方必须要维护关系.
            一对多关系中: 一的一方放弃.也只能一的一方放弃.多的一方不能放弃.
        -->

        <!--
		lazy属性: 决定是否延迟加载
			true(默认值): 延迟加载,懒加载
			false: 立即加载
			extra: 极其懒惰
		fetch属性: 决定加载策略.使用什么类型的sql语句加载集合数据
			select(默认值): 单表查询加载
			join: 使用多表查询加载集合
			subselect:使用子查询加载集合
	 -->

        <!-- batch-size: 抓取集合的数量为3.
	 		抓取客户的集合时,一次抓取几个客户的联系人集合.
	  -->
        <set name="linkMens" inverse="true" cascade="save-update" lazy="true" fetch="select" batch-size="3">
            <key column="lkm_cust_id"></key>
            <one-to-many class="LinkMan"/>
        </set>
    </class>
</hibernate-mapping>